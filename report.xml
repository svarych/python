<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite name="pytest" errors="0" failures="3" skipped="5" tests="33" time="159.161" timestamp="2024-03-28T19:50:07.861317" hostname="DESKTOP-TIVHJNN"><testcase classname="testing.tests.api.assets.test_site_assets.TestSiteAssets" name="test_search_for_assets" file="testing\tests\api\assets\test_site_assets.py" line="9" time="5.787" /><testcase classname="testing.tests.api.assets.test_site_assets.TestSiteAssets" name="test_get_details_of_the_asset" file="testing\tests\api\assets\test_site_assets.py" line="14" time="0.001" /><testcase classname="testing.tests.api.assets.test_site_assets.TestSiteAssets" name="test_get_list_of_tags_attached_to_asset" file="testing\tests\api\assets\test_site_assets.py" line="20" time="0.707" /><testcase classname="testing.tests.api.assets.test_site_assets.TestSiteAssets" name="test_get_list_of_prox_events_for_asset" file="testing\tests\api\assets\test_site_assets.py" line="35" time="0.000"><skipped type="pytest.skip" message="Not Implemented">E:\projects\zainar-project\ilaas\testing\tests\api\assets\test_site_assets.py:36: Not Implemented</skipped></testcase><testcase classname="testing.tests.api.assets.test_site_assets.TestSiteAssets" name="test_get_prox_events_history_for_asset" file="testing\tests\api\assets\test_site_assets.py" line="55" time="0.624" /><testcase classname="testing.tests.api.assets.test_site_assets.TestSiteAssets" name="test_get_list_of_geofence_asset_occupancy_events" file="testing\tests\api\assets\test_site_assets.py" line="70" time="0.000"><skipped type="pytest.skip" message="Not Implemented">E:\projects\zainar-project\ilaas\testing\tests\api\assets\test_site_assets.py:71: Not Implemented</skipped></testcase><testcase classname="testing.tests.api.assets.test_site_assets.TestSiteAssets" name="test_get_rules_for_proximity_analysis_between_assets" file="testing\tests\api\assets\test_site_assets.py" line="88" time="0.649" /><testcase classname="testing.tests.api.assets.test_site_assets.TestSiteAssets" name="test_get_specified_asset_proximity_rule" file="testing\tests\api\assets\test_site_assets.py" line="109" time="0.557" /><testcase classname="testing.tests.api.assets.test_site_assets.TestSiteAssets" name="test_get_list_of_asset_category_trees" file="testing\tests\api\assets\test_site_assets.py" line="125" time="0.001" /><testcase classname="testing.tests.api.assets.test_site_assets.TestSiteAssets" name="test_search_for_asset_categories_in_tree" file="testing\tests\api\assets\test_site_assets.py" line="130" time="0.640" /><testcase classname="testing.tests.api.assets.test_site_assets.TestSiteAssets" name="test_get_details_of_specified_asset_category_tree" file="testing\tests\api\assets\test_site_assets.py" line="147" time="0.607" /><testcase classname="testing.tests.api.auth.test_auth.TestAuthApi" name="test_initiate_auth" file="testing\tests\api\auth\test_auth.py" line="4" time="3.324" /><testcase classname="testing.tests.api.auth.test_auth.TestAuthApi" name="test_get_id" file="testing\tests\api\auth\test_auth.py" line="9" time="0.000" /><testcase classname="testing.tests.api.auth.test_auth.TestAuthApi" name="test_get_credentials_for_identity" file="testing\tests\api\auth\test_auth.py" line="14" time="0.001" /><testcase classname="testing.tests.api.geofences.test_geofences.TestGeoFences" name="test_get_geofences" file="testing\tests\api\geofences\test_geofences.py" line="10" time="9.376" /><testcase classname="testing.tests.api.geofences.test_geofences.TestGeoFences" name="test_get_geofence_details" file="testing\tests\api\geofences\test_geofences.py" line="33" time="8.647"><failure message="AssertionError: assert 0 &gt; 2&#10; +  where 0 = len({})&#10; +    where {} = &lt;function loads at 0x0000020E0F5C02C0&gt;(b'{}')&#10; +      where &lt;function loads at 0x0000020E0F5C02C0&gt; = json.loads&#10; +      and   b'{}' = &lt;Response [200]&gt;.content">self = &lt;testing.tests.api.geofences.test_geofences.TestGeoFences object at 0x0000020E12171810&gt;

    @pytest.mark.api
    @pytest.mark.geofences
    def test_get_geofence_details(self):
        geofences_url = urls.get("geofences")
        geofence_res_name = "geofnc-211576f6232b4ec7a7217908fe741012"
        host = geofences_url.replace("https://", "")
        auth = AuthHeadersGenerator(
            username="postman",
            with_site_res=True,
            host=host,
            url_addition=f"/{geofence_res_name}",
            end_point="geofences",
        )
        url = geofences_url + (
            f"/dev/accounts/{auth.account_res_name}/sites/{auth.site_res_name}/geofences/{geofence_res_name}"
        )
        response = requests.get(url=url, headers=auth.auth_headers)
        assert response.status_code == 200
&gt;       assert len(json.loads(response.content)) &gt; 2
E       AssertionError: assert 0 &gt; 2
E        +  where 0 = len({})
E        +    where {} = &lt;function loads at 0x0000020E0F5C02C0&gt;(b'{}')
E        +      where &lt;function loads at 0x0000020E0F5C02C0&gt; = json.loads
E        +      and   b'{}' = &lt;Response [200]&gt;.content

testing\tests\api\geofences\test_geofences.py:52: AssertionError</failure></testcase><testcase classname="testing.tests.api.geofences.test_geofences.TestGeoFences" name="test_geofence_get_congestion_rules" file="testing\tests\api\geofences\test_geofences.py" line="53" time="4.342"><failure message="assert not &quot;Unable to import module 'geofences_ms.lambda_functions.ilaas_site_geofences_ms_get_all_congestion_rules_for_geofence_lambda': No module named 'geofences_ms'&quot;&#10; +  where &quot;Unable to import module 'geofences_ms.lambda_functions.ilaas_site_geofences_ms_get_all_congestion_rules_for_geofence_lambda': No module named 'geofences_ms'&quot; = &lt;built-in method get of dict object at 0x0000020E122D9A80&gt;('errorMessage')&#10; +    where &lt;built-in method get of dict object at 0x0000020E122D9A80&gt; = {'errorMessage': &quot;Unable to import module 'geofences_ms.lambda_functions.ilaas_site_geofences_ms_get_all_congestion_rules_for_geofence_lambda': No module named 'geofences_ms'&quot;, 'errorType': 'Runtime.ImportModuleError', 'stackTrace': []}.get&#10; +      where {'errorMessage': &quot;Unable to import module 'geofences_ms.lambda_functions.ilaas_site_geofences_ms_get_all_congestion_rules_for_geofence_lambda': No module named 'geofences_ms'&quot;, 'errorType': 'Runtime.ImportModuleError', 'stackTrace': []} = &lt;function loads at 0x0000020E0F5C02C0&gt;(b'{&quot;errorMessage&quot;: &quot;Unable to import module \'geofences_ms.lambda_functions.ilaas_site_geofences_ms_get_all_congestion..._for_geofence_lambda\': No module named \'geofences_ms\'&quot;, &quot;errorType&quot;: &quot;Runtime.ImportModuleError&quot;, &quot;stackTrace&quot;: []}')&#10; +        where &lt;function loads at 0x0000020E0F5C02C0&gt; = json.loads&#10; +        and   b'{&quot;errorMessage&quot;: &quot;Unable to import module \'geofences_ms.lambda_functions.ilaas_site_geofences_ms_get_all_congestion..._for_geofence_lambda\': No module named \'geofences_ms\'&quot;, &quot;errorType&quot;: &quot;Runtime.ImportModuleError&quot;, &quot;stackTrace&quot;: []}' = &lt;Response [200]&gt;.content">self = &lt;testing.tests.api.geofences.test_geofences.TestGeoFences object at 0x0000020E12171B10&gt;

    @pytest.mark.api
    @pytest.mark.geofences
    def test_geofence_get_congestion_rules(self):
        geofences_url = urls.get("geofences")
        geofence_res_name = "geofnc-9fa03087cebf4a65a35c19a8ef9e6d25"
        floor_res_name = "floor-ef1cc8bd3659433288dffe00905f48aa"
        status = "inactive"
        host = geofences_url.replace("https://", "")
        auth = AuthHeadersGenerator(
            username="postman",
            with_site_res=True,
            host=host,
            url_addition=f"/{geofence_res_name}/rules/tags-congestion",
            request_parameters=f"floorResName={floor_res_name}&amp;status={status}",
            end_point="geofences",
        )
        url = geofences_url + (
            f"/dev/accounts/{auth.account_res_name}/sites/{auth.site_res_name}/geofences/{geofence_res_name}/rules"
            f"/tags-congestion?"
            f"floorResName={floor_res_name}&amp;"
            f"status={status}"
        )
        response = requests.get(url=url, headers=auth.auth_headers)
        assert response.status_code == 200
&gt;       assert not json.loads(response.content).get("errorMessage")
E       assert not "Unable to import module 'geofences_ms.lambda_functions.ilaas_site_geofences_ms_get_all_congestion_rules_for_geofence_lambda': No module named 'geofences_ms'"
E        +  where "Unable to import module 'geofences_ms.lambda_functions.ilaas_site_geofences_ms_get_all_congestion_rules_for_geofence_lambda': No module named 'geofences_ms'" = &lt;built-in method get of dict object at 0x0000020E122D9A80&gt;('errorMessage')
E        +    where &lt;built-in method get of dict object at 0x0000020E122D9A80&gt; = {'errorMessage': "Unable to import module 'geofences_ms.lambda_functions.ilaas_site_geofences_ms_get_all_congestion_rules_for_geofence_lambda': No module named 'geofences_ms'", 'errorType': 'Runtime.ImportModuleError', 'stackTrace': []}.get
E        +      where {'errorMessage': "Unable to import module 'geofences_ms.lambda_functions.ilaas_site_geofences_ms_get_all_congestion_rules_for_geofence_lambda': No module named 'geofences_ms'", 'errorType': 'Runtime.ImportModuleError', 'stackTrace': []} = &lt;function loads at 0x0000020E0F5C02C0&gt;(b'{"errorMessage": "Unable to import module \'geofences_ms.lambda_functions.ilaas_site_geofences_ms_get_all_congestion..._for_geofence_lambda\': No module named \'geofences_ms\'", "errorType": "Runtime.ImportModuleError", "stackTrace": []}')
E        +        where &lt;function loads at 0x0000020E0F5C02C0&gt; = json.loads
E        +        and   b'{"errorMessage": "Unable to import module \'geofences_ms.lambda_functions.ilaas_site_geofences_ms_get_all_congestion..._for_geofence_lambda\': No module named \'geofences_ms\'", "errorType": "Runtime.ImportModuleError", "stackTrace": []}' = &lt;Response [200]&gt;.content

testing\tests\api\geofences\test_geofences.py:78: AssertionError</failure></testcase><testcase classname="testing.tests.api.geofences.test_geofences.TestGeoFences" name="test_geofence_get_rule_for_congestion" file="testing\tests\api\geofences\test_geofences.py" line="79" time="4.002"><failure message="assert not &quot;Unable to import module 'geofences_ms.lambda_functions.ilaas_site_geofences_ms_get_congestion_rule_lambda': No module named 'geofences_ms'&quot;&#10; +  where &quot;Unable to import module 'geofences_ms.lambda_functions.ilaas_site_geofences_ms_get_congestion_rule_lambda': No module named 'geofences_ms'&quot; = &lt;built-in method get of dict object at 0x0000020E12240100&gt;('errorMessage')&#10; +    where &lt;built-in method get of dict object at 0x0000020E12240100&gt; = {'errorMessage': &quot;Unable to import module 'geofences_ms.lambda_functions.ilaas_site_geofences_ms_get_congestion_rule_lambda': No module named 'geofences_ms'&quot;, 'errorType': 'Runtime.ImportModuleError', 'stackTrace': []}.get&#10; +      where {'errorMessage': &quot;Unable to import module 'geofences_ms.lambda_functions.ilaas_site_geofences_ms_get_congestion_rule_lambda': No module named 'geofences_ms'&quot;, 'errorType': 'Runtime.ImportModuleError', 'stackTrace': []} = &lt;function loads at 0x0000020E0F5C02C0&gt;(b'{&quot;errorMessage&quot;: &quot;Unable to import module \'geofences_ms.lambda_functions.ilaas_site_geofences_ms_get_congestion_rule_lambda\': No module named \'geofences_ms\'&quot;, &quot;errorType&quot;: &quot;Runtime.ImportModuleError&quot;, &quot;stackTrace&quot;: []}')&#10; +        where &lt;function loads at 0x0000020E0F5C02C0&gt; = json.loads&#10; +        and   b'{&quot;errorMessage&quot;: &quot;Unable to import module \'geofences_ms.lambda_functions.ilaas_site_geofences_ms_get_congestion_rule_lambda\': No module named \'geofences_ms\'&quot;, &quot;errorType&quot;: &quot;Runtime.ImportModuleError&quot;, &quot;stackTrace&quot;: []}' = &lt;Response [200]&gt;.content">self = &lt;testing.tests.api.geofences.test_geofences.TestGeoFences object at 0x0000020E12171E50&gt;

    @pytest.mark.api
    @pytest.mark.geofences
    def test_geofence_get_rule_for_congestion(self):
        geofences_url = urls.get("geofences")
        geofence_res_name = "geofnc-9fa03087cebf4a65a35c19a8ef9e6d25"
        rule_res_name = "rule-123"  # todo: get real rule name
        host = geofences_url.replace("https://", "")
        auth = AuthHeadersGenerator(
            username="postman",
            with_site_res=True,
            host=host,
            end_point=f"geofences/{geofence_res_name}/rules/tags-congestion/{rule_res_name}",
        )
        url = geofences_url + (
            f"/dev/accounts/{auth.account_res_name}/sites/{auth.site_res_name}/geofences/{geofence_res_name}/rules"
            f"/tags-congestion/{rule_res_name}"
        )
        response = requests.get(url=url, headers=auth.auth_headers)
        assert response.status_code == 200
&gt;       assert not json.loads(response.content).get("errorMessage")
E       assert not "Unable to import module 'geofences_ms.lambda_functions.ilaas_site_geofences_ms_get_congestion_rule_lambda': No module named 'geofences_ms'"
E        +  where "Unable to import module 'geofences_ms.lambda_functions.ilaas_site_geofences_ms_get_congestion_rule_lambda': No module named 'geofences_ms'" = &lt;built-in method get of dict object at 0x0000020E12240100&gt;('errorMessage')
E        +    where &lt;built-in method get of dict object at 0x0000020E12240100&gt; = {'errorMessage': "Unable to import module 'geofences_ms.lambda_functions.ilaas_site_geofences_ms_get_congestion_rule_lambda': No module named 'geofences_ms'", 'errorType': 'Runtime.ImportModuleError', 'stackTrace': []}.get
E        +      where {'errorMessage': "Unable to import module 'geofences_ms.lambda_functions.ilaas_site_geofences_ms_get_congestion_rule_lambda': No module named 'geofences_ms'", 'errorType': 'Runtime.ImportModuleError', 'stackTrace': []} = &lt;function loads at 0x0000020E0F5C02C0&gt;(b'{"errorMessage": "Unable to import module \'geofences_ms.lambda_functions.ilaas_site_geofences_ms_get_congestion_rule_lambda\': No module named \'geofences_ms\'", "errorType": "Runtime.ImportModuleError", "stackTrace": []}')
E        +        where &lt;function loads at 0x0000020E0F5C02C0&gt; = json.loads
E        +        and   b'{"errorMessage": "Unable to import module \'geofences_ms.lambda_functions.ilaas_site_geofences_ms_get_congestion_rule_lambda\': No module named \'geofences_ms\'", "errorType": "Runtime.ImportModuleError", "stackTrace": []}' = &lt;Response [200]&gt;.content

testing\tests\api\geofences\test_geofences.py:99: AssertionError</failure></testcase><testcase classname="testing.tests.api.geofences.test_geofences.TestGeoFences" name="test_geofence_get_rules_for_tags_access" file="testing\tests\api\geofences\test_geofences.py" line="100" time="4.214" /><testcase classname="testing.tests.api.locations.test_locations.TestLocationsStreams" name="test_locations_stream_of_tag" file="testing\tests\api\locations\test_locations.py" line="8" time="0.000"><skipped type="pytest.skip" message="Need investigating">E:\projects\zainar-project\ilaas\testing\tests\api\locations\test_locations.py:9: Need investigating</skipped></testcase><testcase classname="testing.tests.api.site_devices.test_site_devices.TestSiteDevicesApi" name="test_create_site_account" file="testing\tests\api\site_devices\test_site_devices.py" line="21" time="0.000"><skipped type="pytest.skip" message="Generated wrong signature">E:\projects\zainar-project\ilaas\testing\tests\api\site_devices\test_site_devices.py:22: Generated wrong signature</skipped></testcase><testcase classname="testing.tests.api.site_devices.test_site_devices.TestSiteDevicesApi" name="test_get_all_sites_for_account" file="testing\tests\api\site_devices\test_site_devices.py" line="33" time="14.371" /><testcase classname="testing.tests.api.site_devices.test_site_devices.TestSiteDevicesApi" name="test_get_the_site_information" file="testing\tests\api\site_devices\test_site_devices.py" line="41" time="11.806" /><testcase classname="testing.tests.api.site_devices.test_site_devices.TestSiteDevicesApi" name="test_get_tags_in_a_site" file="testing\tests\api\site_devices\test_site_devices.py" line="52" time="9.494" /><testcase classname="testing.tests.api.site_devices.test_site_devices.TestSiteDevicesApi" name="test_get_information_on_tag" file="testing\tests\api\site_devices\test_site_devices.py" line="65" time="11.416" /><testcase classname="testing.tests.api.site_devices.test_site_devices.TestSiteDevicesApi" name="test_get_readers_in_a_site" file="testing\tests\api\site_devices\test_site_devices.py" line="83" time="9.646" /><testcase classname="testing.tests.api.site_devices.test_site_devices.TestSiteDevicesApi" name="test_get_information_on_reader" file="testing\tests\api\site_devices\test_site_devices.py" line="88" time="8.559" /><testcase classname="testing.tests.api.site_devices.test_site_devices.TestSiteDevicesApi" name="test_get_floors_for_the_site" file="testing\tests\api\site_devices\test_site_devices.py" line="103" time="9.947" /><testcase classname="testing.tests.api.tenants.test_tenants.TestTenantsApi" name="test_tenants_get_customers" file="testing\tests\api\tenants\test_tenants.py" line="10" time="11.433" /><testcase classname="testing.tests.api.tenants.test_tenants.TestTenantsApi" name="test_tenants_get_accounts" file="testing\tests\api\tenants\test_tenants.py" line="15" time="9.457" /><testcase classname="testing.tests.api.tenants.test_tenants.TestTenantsApi" name="test_tenants_get_customer_info" file="testing\tests\api\tenants\test_tenants.py" line="20" time="9.055" /><testcase classname="testing.tests.api.tenants.test_tenants.TestTenantsApi" name="test_tenants_get_customer_accounts" file="testing\tests\api\tenants\test_tenants.py" line="35" time="10.230" /><testcase classname="testing.tests.api.tenants.test_tenants.TestTenantsApi" name="test_tenants_get_customer_account_info" file="testing\tests\api\tenants\test_tenants.py" line="51" time="0.003"><skipped type="pytest.skip" message="404: need investigate">E:\projects\zainar-project\ilaas\testing\tests\api\tenants\test_tenants.py:52: 404: need investigate</skipped></testcase></testsuite></testsuites>